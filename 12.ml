let rec abs value:int =
    if value > 0 then value else (0 - value);;

let rec modulo (num:int) (div:int) =
    if num < 0 then modulo (num + div) div
    else if num >= div then modulo (num - div) div
    else num;;

let deg_cos ang =
    match ang with
    | 0 -> 1
    | 90 -> 0
    | 180 -> -1
    | 270 -> 0;;

let deg_sin ang =
    match ang with
    | 0 -> 0
    | 90 -> 1
    | 180 -> 0
    | 270 -> -1;;

let update_position (curr_pos: int list) next_action =
    match next_action with
    | ('N', mag) -> [(List.nth curr_pos 0); (List.nth curr_pos 1) + mag; (List.nth curr_pos 2)]
    | ('S', mag) -> [(List.nth curr_pos 0); (List.nth curr_pos 1) - mag; (List.nth curr_pos 2)]
    | ('E', mag) -> [(List.nth curr_pos 0) + mag; (List.nth curr_pos 1); (List.nth curr_pos 2)]
    | ('W', mag) -> [(List.nth curr_pos 0) - mag; (List.nth curr_pos 1); (List.nth curr_pos 2)]
    | ('L', mag) -> [(List.nth curr_pos 0); (List.nth curr_pos 1); modulo ((List.nth curr_pos 2) + mag) 360]
    | ('R', mag) -> [(List.nth curr_pos 0); (List.nth curr_pos 1); modulo ((List.nth curr_pos 2) - mag) 360]
    | ('F', mag) -> [(List.nth curr_pos 0) + mag*(deg_cos (List.nth curr_pos 2)); (List.nth curr_pos 1) + mag*(deg_sin (List.nth curr_pos 2)); (List.nth curr_pos 2)]
    | ('B', mag) -> [(List.nth curr_pos 0) - mag*(deg_cos (List.nth curr_pos 2)); (List.nth curr_pos 1) - mag*(deg_sin (List.nth curr_pos 2)); (List.nth curr_pos 2)];;

let re_position (curr_pos: int list) next_action =
    match next_action with
    | ('N', mag) -> [(List.nth curr_pos 0); (List.nth curr_pos 1); (List.nth curr_pos 2); (List.nth curr_pos 3) + mag]
    | ('S', mag) -> [(List.nth curr_pos 0); (List.nth curr_pos 1); (List.nth curr_pos 2); (List.nth curr_pos 3) - mag]
    | ('E', mag) -> [(List.nth curr_pos 0); (List.nth curr_pos 1); (List.nth curr_pos 2) + mag; (List.nth curr_pos 3)]
    | ('W', mag) -> [(List.nth curr_pos 0); (List.nth curr_pos 1); (List.nth curr_pos 2) - mag; (List.nth curr_pos 3)]
    | ('L', mag) -> [(List.nth curr_pos 0); (List.nth curr_pos 1); ((deg_cos (modulo mag 360)) * (List.nth curr_pos 2)) - ((deg_sin (modulo mag 360)) * (List.nth curr_pos 3)); ((deg_cos (modulo mag 360)) * (List.nth curr_pos 3)) + ((deg_sin (modulo mag 360)) * (List.nth curr_pos 2))]
    | ('R', mag) -> [(List.nth curr_pos 0); (List.nth curr_pos 1); ((deg_cos (modulo (0 - mag) 360)) * (List.nth curr_pos 2)) - ((deg_sin (modulo (0 - mag) 360)) * (List.nth curr_pos 3)); ((deg_cos (modulo (0 - mag) 360)) * (List.nth curr_pos 3)) + ((deg_sin (modulo (0 - mag) 360)) * (List.nth curr_pos 2))]
    | ('F', mag) -> [(List.nth curr_pos 0) + mag*(List.nth curr_pos 2); (List.nth curr_pos 1) + mag*(List.nth curr_pos 3); (List.nth curr_pos 2); (List.nth curr_pos 3)];;

(*----------------------------------------------*)
(*-- Data manipulations                       --*)
(*----------------------------------------------*)

let data = [('F', 36); ('L', 90); ('S', 5); ('F', 67); ('W', 3); ('R', 90); ('F', 67); ('R', 90); ('E', 1); ('S', 5); ('W', 2); ('N', 1); ('E', 1); ('F', 21); ('S', 4); ('E', 2); ('S', 5); ('R', 90); ('N', 1); ('F', 69); ('R', 180); ('N', 3); ('F', 40); ('E', 1); ('S', 3); ('R', 90); ('S', 1); ('R', 90); ('F', 100); ('W', 3); ('F', 82); ('N', 2); ('W', 2); ('F', 47); ('W', 5); ('F', 77); ('W', 5); ('R', 90); ('N', 2); ('W', 2); ('F', 34); ('N', 3); ('E', 3); ('F', 54); ('L', 90); ('S', 1); ('E', 3); ('R', 90); ('F', 9); ('R', 90); ('E', 1); ('N', 1); ('F', 91); ('L', 90); ('S', 4); ('W', 5); ('S', 3); ('L', 90); ('W', 3); ('F', 6); ('L', 180); ('N', 5); ('F', 34); ('E', 2); ('L', 90); ('F', 84); ('L', 90); ('W', 5); ('L', 90); ('W', 2); ('N', 2); ('E', 4); ('L', 270); ('F', 31); ('N', 1); ('R', 90); ('N', 1); ('W', 4); ('L', 90); ('F', 72); ('S', 4); ('F', 2); ('L', 90); ('F', 92); ('N', 4); ('E', 5); ('F', 88); ('R', 180); ('E', 1); ('S', 4); ('E', 1); ('S', 1); ('F', 9); ('N', 2); ('W', 2); ('L', 90); ('F', 61); ('R', 90); ('F', 93); ('S', 3); ('L', 90); ('W', 3); ('F', 26); ('E', 1); ('L', 90); ('E', 4); ('S', 3); ('R', 270); ('N', 2); ('F', 39); ('R', 180); ('S', 4); ('E', 4); ('F', 65); ('S', 4); ('R', 180); ('S', 2); ('F', 46); ('W', 5); ('R', 90); ('E', 4); ('L', 90); ('F', 98); ('W', 4); ('R', 90); ('E', 2); ('R', 180); ('F', 14); ('L', 90); ('S', 1); ('F', 8); ('S', 3); ('L', 90); ('N', 3); ('F', 11); ('S', 2); ('L', 90); ('W', 3); ('S', 3); ('L', 90); ('W', 1); ('L', 90); ('F', 64); ('S', 2); ('E', 2); ('N', 4); ('W', 3); ('F', 38); ('E', 3); ('N', 2); ('F', 19); ('S', 2); ('L', 90); ('E', 2); ('F', 94); ('E', 1); ('R', 90); ('E', 2); ('S', 5); ('L', 90); ('F', 6); ('E', 3); ('S', 4); ('L', 180); ('W', 5); ('R', 90); ('N', 3); ('W', 3); ('S', 5); ('F', 24); ('L', 90); ('F', 1); ('W', 4); ('F', 47); ('W', 2); ('S', 1); ('E', 1); ('S', 2); ('E', 1); ('N', 4); ('L', 180); ('F', 61); ('W', 2); ('F', 20); ('E', 5); ('S', 3); ('F', 37); ('F', 6); ('L', 90); ('E', 1); ('R', 90); ('W', 5); ('S', 2); ('L', 90); ('E', 2); ('N', 2); ('L', 90); ('F', 50); ('W', 2); ('F', 49); ('R', 90); ('S', 1); ('R', 180); ('S', 5); ('R', 90); ('S', 1); ('E', 4); ('R', 90); ('F', 65); ('L', 90); ('S', 5); ('E', 1); ('F', 61); ('S', 2); ('F', 40); ('L', 90); ('E', 5); ('R', 90); ('E', 5); ('L', 90); ('S', 1); ('F', 67); ('S', 2); ('F', 48); ('R', 270); ('E', 4); ('F', 35); ('S', 5); ('F', 14); ('L', 180); ('E', 3); ('L', 90); ('F', 64); ('W', 3); ('R', 90); ('E', 2); ('R', 90); ('S', 3); ('L', 90); ('S', 2); ('W', 4); ('F', 94); ('R', 180); ('N', 1); ('W', 1); ('R', 90); ('F', 41); ('R', 90); ('N', 1); ('L', 90); ('W', 2); ('N', 2); ('R', 90); ('F', 43); ('N', 1); ('L', 180); ('F', 6); ('E', 4); ('F', 99); ('N', 1); ('F', 54); ('N', 3); ('R', 90); ('F', 57); ('W', 5); ('F', 16); ('S', 5); ('L', 90); ('E', 5); ('R', 90); ('S', 4); ('L', 90); ('F', 68); ('L', 180); ('S', 1); ('E', 4); ('R', 90); ('F', 88); ('S', 2); ('F', 19); ('R', 90); ('W', 2); ('W', 1); ('F', 62); ('S', 2); ('R', 90); ('N', 3); ('R', 180); ('S', 5); ('E', 4); ('F', 41); ('W', 2); ('S', 5); ('W', 1); ('R', 90); ('W', 2); ('W', 4); ('L', 90); ('S', 4); ('R', 90); ('F', 1); ('W', 5); ('F', 44); ('W', 3); ('N', 2); ('F', 41); ('W', 5); ('L', 90); ('N', 5); ('W', 1); ('F', 13); ('E', 2); ('R', 90); ('N', 3); ('W', 3); ('F', 8); ('W', 1); ('R', 90); ('F', 51); ('R', 90); ('E', 1); ('S', 5); ('F', 18); ('S', 2); ('E', 3); ('F', 23); ('L', 180); ('F', 26); ('N', 2); ('F', 25); ('E', 4); ('F', 24); ('E', 5); ('N', 1); ('L', 90); ('S', 1); ('E', 5); ('R', 90); ('F', 88); ('S', 2); ('W', 3); ('R', 90); ('F', 30); ('L', 90); ('E', 4); ('L', 270); ('S', 1); ('E', 2); ('F', 87); ('W', 4); ('N', 1); ('R', 180); ('N', 1); ('F', 2); ('L', 90); ('S', 3); ('F', 29); ('S', 4); ('L', 90); ('N', 2); ('F', 59); ('L', 90); ('W', 2); ('N', 5); ('F', 45); ('N', 2); ('W', 4); ('N', 4); ('F', 27); ('W', 5); ('F', 4); ('S', 2); ('F', 56); ('L', 180); ('S', 2); ('R', 90); ('W', 4); ('F', 95); ('L', 90); ('R', 90); ('F', 68); ('L', 90); ('S', 4); ('W', 5); ('F', 46); ('N', 1); ('W', 2); ('F', 80); ('R', 270); ('F', 35); ('L', 90); ('E', 3); ('S', 5); ('R', 90); ('S', 1); ('W', 2); ('F', 53); ('S', 3); ('R', 180); ('F', 38); ('F', 57); ('W', 1); ('R', 90); ('N', 1); ('W', 4); ('S', 3); ('R', 180); ('E', 1); ('F', 24); ('S', 5); ('F', 96); ('W', 4); ('F', 53); ('S', 4); ('F', 59); ('F', 7); ('E', 5); ('S', 2); ('L', 90); ('E', 2); ('L', 90); ('N', 5); ('L', 90); ('N', 3); ('F', 75); ('S', 2); ('R', 180); ('N', 1); ('W', 3); ('N', 3); ('R', 90); ('F', 71); ('L', 180); ('S', 4); ('L', 90); ('F', 53); ('S', 5); ('L', 90); ('N', 5); ('S', 5); ('F', 14); ('L', 90); ('E', 3); ('F', 40); ('N', 1); ('E', 3); ('N', 2); ('F', 69); ('W', 1); ('N', 5); ('W', 3); ('S', 3); ('R', 90); ('N', 3); ('F', 3); ('S', 5); ('E', 1); ('R', 90); ('E', 5); ('F', 16); ('R', 90); ('F', 94); ('E', 2); ('L', 180); ('F', 16); ('E', 2); ('F', 71); ('W', 1); ('F', 4); ('L', 90); ('W', 4); ('F', 45); ('L', 90); ('S', 3); ('W', 3); ('S', 5); ('R', 90); ('E', 3); ('N', 1); ('W', 1); ('S', 3); ('L', 90); ('W', 2); ('W', 1); ('S', 5); ('F', 1); ('L', 90); ('E', 3); ('L', 180); ('S', 5); ('F', 5); ('W', 1); ('L', 90); ('N', 5); ('E', 5); ('R', 90); ('E', 2); ('R', 90); ('W', 5); ('R', 90); ('F', 11); ('W', 5); ('S', 2); ('E', 5); ('R', 90); ('F', 29); ('W', 5); ('S', 5); ('F', 14); ('S', 4); ('L', 90); ('F', 48); ('R', 180); ('F', 63); ('E', 4); ('N', 4); ('E', 5); ('W', 5); ('S', 4); ('W', 5); ('S', 5); ('F', 9); ('L', 270); ('W', 3); ('F', 78); ('W', 2); ('F', 100); ('W', 2); ('N', 4); ('F', 44); ('F', 11); ('E', 2); ('F', 17); ('E', 4); ('F', 80); ('S', 5); ('F', 36); ('L', 90); ('W', 2); ('F', 12); ('L', 90); ('N', 4); ('E', 3); ('S', 5); ('F', 90); ('F', 73); ('W', 1); ('S', 3); ('W', 4); ('F', 50); ('N', 4); ('N', 3); ('F', 79); ('W', 5); ('F', 38); ('L', 90); ('W', 5); ('S', 3); ('F', 50); ('R', 90); ('L', 270); ('R', 180); ('F', 84); ('L', 180); ('E', 2); ('R', 180); ('N', 3); ('N', 3); ('W', 5); ('S', 3); ('L', 180); ('N', 3); ('E', 1); ('N', 4); ('N', 5); ('F', 23); ('N', 2); ('E', 1); ('N', 1); ('E', 3); ('F', 64); ('E', 4); ('F', 4); ('R', 90); ('S', 4); ('E', 5); ('S', 2); ('L', 90); ('E', 3); ('F', 32); ('W', 1); ('N', 2); ('F', 20); ('E', 4); ('W', 5); ('F', 93); ('E', 5); ('N', 1); ('W', 4); ('F', 18); ('E', 1); ('N', 1); ('F', 7); ('N', 3); ('F', 55); ('E', 3); ('F', 91); ('W', 4); ('F', 86); ('N', 5); ('W', 1); ('F', 38); ('N', 4); ('R', 180); ('W', 4); ('S', 5); ('F', 95); ('R', 180); ('F', 22); ('R', 90); ('F', 58); ('W', 3); ('F', 62); ('L', 90); ('F', 17); ('S', 2); ('R', 90); ('N', 5); ('L', 90); ('N', 4); ('E', 1); ('N', 1); ('E', 2); ('E', 4); ('R', 180); ('F', 72); ('N', 4); ('E', 4); ('R', 180); ('F', 74); ('W', 5); ('N', 5); ('W', 5); ('N', 5); ('W', 2); ('F', 26); ('S', 2); ('E', 4); ('N', 4); ('F', 23); ('E', 2); ('F', 95); ('E', 1); ('N', 4); ('E', 1); ('L', 270); ('S', 3); ('E', 3); ('R', 90); ('S', 2); ('E', 5); ('R', 180); ('F', 73); ('S', 5); ('W', 1); ('F', 61); ('F', 60); ('E', 2); ('F', 97); ('S', 2); ('L', 90); ('W', 5); ('R', 180); ('F', 99); ('R', 180); ('F', 52); ('N', 1); ('L', 180); ('S', 4); ('W', 4); ('R', 180); ('F', 70); ('S', 4); ('L', 90); ('S', 5); ('W', 2); ('L', 90); ('N', 2); ('W', 5); ('F', 31); ('L', 90); ('E', 3); ('F', 87); ('L', 90); ('S', 2); ('W', 4); ('F', 25); ('L', 180); ('F', 50); ('S', 5); ('E', 1); ('F', 75); ('N', 2); ('F', 30); ('S', 4); ('F', 100); ('E', 3); ('L', 180); ('F', 57); ('L', 90); ('W', 5); ('R', 90); ('W', 2); ('F', 65); ('L', 90); ('F', 29); ('E', 4); ('L', 270); ('E', 3); ('L', 90); ('N', 4); ('E', 2); ('E', 5); ('F', 36); ('N', 4); ('E', 4); ('N', 4); ('F', 41); ('E', 2); ('S', 3); ('F', 72); ('W', 4); ('F', 26); ('L', 90); ('E', 5); ('R', 90); ('N', 4); ('F', 97); ('L', 90); ('W', 1); ('F', 31); ('N', 2); ('L', 90); ('E', 3); ('N', 5); ('L', 90); ('F', 5); ('R', 180); ('F', 97); ('S', 1); ('E', 5); ('N', 4); ('R', 90); ('F', 77); ('N', 2); ('F', 92); ('S', 5); ('F', 84); ('E', 3); ('S', 3); ('L', 270); ('N', 3); ('R', 180); ('N', 4); ('F', 63); ('N', 4); ('E', 5); ('F', 62); ('S', 3); ('F', 54); ('N', 2); ('E', 5); ('F', 89); ('R', 90); ('S', 4); ('F', 95); ('F', 56); ('L', 90); ('S', 4); ('L', 90); ('S', 4); ('R', 180); ('F', 93)];;

let final_position =
    List.fold_left update_position [0;0;0] data;;

Printf.printf "%d\n" (abs (List.nth final_position 0) + abs (List.nth final_position 1));;

let real_position =
    List.fold_left re_position [0;0;10;1] data;;

Printf.printf "%d\n" (abs (List.nth real_position 0) + abs (List.nth real_position 1));;
